//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;
import java.util.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class MIPSGenerator<R,A> extends GJDepthFirst<R,A> {
    //
    // Auto class visitors--probably don't need to be overridden.
    //
    int numArgs;
    public R visit(NodeList n, A argu) {
        R _ret=null;
        int _count=0;
        for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            e.nextElement().accept(this,argu);
            _count++;
        }
        return _ret;
    }

    public R visit(NodeListOptional n, A argu) {
        if ( n.present() ) {
            R _ret=null;
            int _count=0;
            for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
                e.nextElement().accept(this,argu);
                _count++;
            }
            return _ret;
        }
        else
            return null;
    }

    public R visit(NodeOptional n, A argu) {
        if ( n.present() )
            return n.node.accept(this,argu);
        else
            return null;
    }

    public R visit(NodeSequence n, A argu) {
        R _ret=null;
        int _count=0;
        for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            e.nextElement().accept(this,argu);
            _count++;
        }
        return _ret;
    }

    public R visit(NodeToken n, A argu) { return null; }

    //
    // User-generated visitor methods below
    //

    /**
     * f0 -> "MAIN"
     * f1 -> "["
     * f2 -> IntegerLiteral()
     * f3 -> "]"
     * f4 -> "["
     * f5 -> IntegerLiteral()
     * f6 -> "]"
     * f7 -> "["
     * f8 -> IntegerLiteral()
     * f9 -> "]"
     * f10 -> StmtList()
     * f11 -> "END"
     * f12 -> ( SpillInfo() )?
     * f13 -> ( Procedure() )*
     * f14 -> <EOF>
     */
    public R visit(Goal n, A argu) {
        R _ret=null;
        System.out.println(".text");
        System.out.println(".globl main");
        System.out.println("main:");
        System.out.println("move $fp , $sp");
        n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        numArgs = (Integer) n.f2.accept(this, argu);
        n.f3.accept(this, argu);
        n.f4.accept(this, argu);
        int temp = (Integer) n.f5.accept(this, argu);
        n.f6.accept(this, argu);
        n.f7.accept(this, argu);
        int maxcallArgs = (Integer) n.f8.accept(this, argu);
        int stackSize = (Math.max(0,maxcallArgs-4) + temp)*4 + 4;
        System.out.println("subu $sp, $sp, " + stackSize);
        System.out.println("sw $ra , -4($fp)");
        n.f9.accept(this, argu);
        n.f10.accept(this, argu);
        n.f11.accept(this, argu);

        System.out.println("lw $ra , -4($fp)" );
        System.out.println("addu $sp , $sp , " + stackSize);
        System.out.println("j $ra");
        n.f12.accept(this, argu);
        n.f13.accept(this, argu);
        n.f14.accept(this, argu);
        System.out.println(".text\n .globl _halloc");
        System.out.println("_halloc:\n li $v0  9\n syscall\n j $ra");
        System.out.println(".text\n .globl _print");
        System.out.println("_print:\n li $v0  1\n syscall\n la $a0 , newl\n li $v0 , 4\n syscall\n j $ra");
        System.out.println(".data");
        System.out.println(".align 0");
        System.out.println("newl: .asciiz \"\\n\" ");
        System.out.println(".data\n.align 0");
        System.out.println("str_er: .asciiz \" ERROR: abnormal termination\\n\" ");

        return _ret;
    }

    /**
     * f0 -> ( ( Label() )? Stmt() )*
     */
    public R visit(StmtList n, A argu) {
        R _ret=null;
        n.f0.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> Label()
     * f1 -> "["
     * f2 -> IntegerLiteral()
     * f3 -> "]"
     * f4 -> "["
     * f5 -> IntegerLiteral()
     * f6 -> "]"
     * f7 -> "["
     * f8 -> IntegerLiteral()
     * f9 -> "]"
     * f10 -> StmtList()
     * f11 -> "END"
     * f12 -> ( SpillInfo() )?
     */
    public R visit(Procedure n, A argu) {
        sflag = false;
        R _ret=null;
        String str1 = (String) n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        numArgs = (Integer) n.f2.accept(this, argu);
        n.f3.accept(this, argu);
        n.f4.accept(this, argu);
        int temp = (Integer) n.f5.accept(this, argu);
        n.f6.accept(this, argu);
        n.f7.accept(this, argu);
        int maxCallArgs = (Integer) n.f8.accept(this, argu);

        int stackSize = (Math.max(0,maxCallArgs-4) + temp)*4+8;
        System.out.println(".text");
        System.out.println(".globl " + str1);
        System.out.println(str1+":");
        System.out.println("sw $fp , -" + "8($sp)");
        System.out.println("move $fp , $sp");
//        System.out.println("subu $sp, $sp , 8");
        System.out.println("subu $sp , $sp , " + stackSize);
        System.out.println("sw $ra , -4($fp)");



        n.f9.accept(this, argu);
        n.f10.accept(this, argu);
        n.f11.accept(this, argu);
        System.out.println("lw $ra , -4" + "($fp)" );
        System.out.println("lw $fp , "+ (stackSize-8)+"($sp)");
        System.out.println("addu $sp , $sp , " + (stackSize));
        System.out.println("j $ra");
        n.f12.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> NoOpStmt()
     *       | ErrorStmt()
     *       | CJumpStmt()
     *       | JumpStmt()
     *       | HStoreStmt()
     *       | HLoadStmt()
     *       | MoveStmt()
     *       | PrintStmt()
     *       | ALoadStmt()
     *       | AStoreStmt()
     *       | PassArgStmt()
     *       | CallStmt()
     */
    boolean sflag = true;
    public R visit(Stmt n, A argu) {
        R _ret=null;
        sflag = false;
        n.f0.accept(this, argu);
        sflag = true;
        return _ret;
    }

    /**
     * f0 -> "NOOP"
     */
    public R visit(NoOpStmt n, A argu) {
        R _ret=null;
        System.out.println("nop");
        n.f0.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> "ERROR"
     */
    public R visit(ErrorStmt n, A argu) {
        R _ret=null;
        System.out.println("la $a0,str_er");
        System.out.println("jal _print");
        System.out.println("li $v0 10");
        System.out.println("syscall");
        n.f0.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> "CJUMP"
     * f1 -> Reg()
     * f2 -> Label()
     */
    public R visit(CJumpStmt n, A argu) {
        R _ret=null;
        n.f0.accept(this, argu);
        String str = (String) n.f1.accept(this, argu);
        String lab = (String) n.f2.accept(this, argu);
        System.out.println("beqz $" + str + " " +lab );
        return _ret;
    }

    /**
     * f0 -> "JUMP"
     * f1 -> Label()
     */
    public R visit(JumpStmt n, A argu) {
        R _ret=null;
        n.f0.accept(this, argu);
       String str = (String) n.f1.accept(this, argu);
       System.out.println("b " + str);
        return _ret;
    }

    /**
     * f0 -> "HSTORE"
     * f1 -> Reg()
     * f2 -> IntegerLiteral()
     * f3 -> Reg()
     */
    public R visit(HStoreStmt n, A argu) {
        R _ret=null;
        n.f0.accept(this, argu);
        String reg1 = (String) n.f1.accept(this, argu);
        int num = (Integer) n.f2.accept(this, argu);
        String reg2 = (String) n.f3.accept(this, argu);
        System.out.println("sw $" + reg2 +" "+  num+ "($" + reg1 + ")" );
        return _ret;
    }

    /**
     * f0 -> "HLOAD"
     * f1 -> Reg()
     * f2 -> Reg()
     * f3 -> IntegerLiteral()
     */
    public R visit(HLoadStmt n, A argu) {
        R _ret=null;
        n.f0.accept(this, argu);
        String reg1 = (String) n.f1.accept(this, argu);
        String reg2 = (String) n.f2.accept(this, argu);
        int num = (Integer) n.f3.accept(this, argu);
        System.out.println("lw $" + reg1+ " " +  num+ "($" + reg2 + ")" );
        return _ret;
    }

    /**
     * f0 -> "MOVE"
     * f1 -> Reg()
     * f2 -> Exp()
     */
    public R visit(MoveStmt n, A argu) {
        R _ret=null;
        n.f0.accept(this, argu);
       String reg = (String) n.f1.accept(this, argu);
        n.f2.accept(this, argu);
        System.out.println("move $" + reg + " $v0");
        return _ret;
    }

    /**
     * f0 -> "PRINT"
     * f1 -> SimpleExp()
     */
    public R visit(PrintStmt n, A argu) {
        R _ret=null;
        n.f0.accept(this, argu);

        n.f1.accept(this, argu);
        System.out.println("move $a0 $v0");
        System.out.println("jal _print");
        return _ret;
    }

    /**
     * f0 -> "ALOAD"
     * f1 -> Reg()
     * f2 -> SpilledArg()
     */
    public R visit(ALoadStmt n, A argu) {
        R _ret=null;
        n.f0.accept(this, argu);
        String reg = (String) n.f1.accept(this, argu);
       int num = (Integer) n.f2.accept(this, argu);
       if(numArgs>=3 && num<numArgs-4) {
           System.out.println("lw $" + reg + " , " + (4 * num) + "($fp)");
           return  _ret;
       }
        System.out.println("lw $" + reg + " , " + (4 * num) + "($sp)");
        return _ret;
    }

    /**
     * f0 -> "ASTORE"
     * f1 -> SpilledArg()
     * f2 -> Reg()
     */
    public R visit(AStoreStmt n, A argu) {
        R _ret=null;
        n.f0.accept(this, argu);
        int num = (Integer) n.f1.accept(this, argu);
        String reg = (String) n.f2.accept(this, argu);
        if(numArgs >= 4 && num < numArgs-4) {
            System.out.println("sw $" + reg + " , " + (4 * num) + "($fp)");
            return _ret;
        }
        System.out.println("sw $" + reg + " , " + (4 * num) + "($sp)");
        return _ret;
    }

    /**
     * f0 -> "PASSARG"
     * f1 -> IntegerLiteral()
     * f2 -> Reg()
     */
    public R visit(PassArgStmt n, A argu) {
        R _ret=null;
        n.f0.accept(this, argu);
        int num = (Integer) n.f1.accept(this, argu);
        String reg = (String) n.f2.accept(this, argu);
        System.out.println("sw $" + reg + " , " + (4*(num-1)) + "($sp)");
        return _ret;
    }

    /**
     * f0 -> "CALL"
     * f1 -> SimpleExp()
     */
    public R visit(CallStmt n, A argu) {
        R _ret=null;
        n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        System.out.println("move $v1 $v0");
        System.out.println("jalr $v1");
        return _ret;
    }

    /**
     * f0 -> HAllocate()
     *       | BinOp()
     *       | SimpleExp()
     */
    public R visit(Exp n, A argu) {
        R _ret=null;
        n.f0.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> "HALLOCATE"
     * f1 -> SimpleExp()
     */
    public R visit(HAllocate n, A argu) {
        R _ret=null;

        n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        System.out.println("move $a0 $v0");
        System.out.println("jal _halloc");
        return _ret;
    }

    /**
     * f0 -> Operator()
     * f1 -> Reg()
     * f2 -> SimpleExp()
     */
    public R visit(BinOp n, A argu) {
        R _ret=null;
        String op = (String) n.f0.accept(this, argu);
        String reg = (String) n.f1.accept(this, argu);
        n.f2.accept(this, argu);
        System.out.println("move $v1 $v0");
        if(op.equals("LE")){
            System.out.println("sle $v0 , $" + reg + ", $v1");
        }
        if(op.equals("NE")){
            System.out.println("sne $v0 , $" + reg + ", $v1");
        }
        if(op.equals("PLUS")){
            System.out.println("add $v0 , $" + reg + ", $v1");
        }
        if(op.equals("MINUS")){
            System.out.println("sub $v0 , $" + reg + ", $v1");
        }
        if(op.equals("TIMES")){
            System.out.println("mul $v0 , $" + reg + ", $v1");
        }
        if(op.equals("DIV")){
            System.out.println("div $v0 , $" + reg + ", $v1");
        }
        return _ret;
    }

    /**
     * f0 -> "LE"
     *       | "NE"
     *       | "PLUS"
     *       | "MINUS"
     *       | "TIMES"
     *       | "DIV"
     */
    public R visit(Operator n, A argu) {
        R _ret=null;
        n.f0.accept(this, argu);
        if(n.f0.which == 0) _ret = (R)"LE";
        else if(n.f0.which == 1) _ret = (R)"NE";
        else if(n.f0.which == 2) _ret = (R)"PLUS";
        else if(n.f0.which == 3) _ret = (R)"MINUS";
        else if(n.f0.which == 4) _ret = (R)"TIMES";
        else  _ret = (R)"DIV";

        return _ret;
    }

    /**
     * f0 -> "SPILLEDARG"
     * f1 -> IntegerLiteral()
     */
    public R visit(SpilledArg n, A argu) {
        R _ret=null;
        n.f0.accept(this, argu);
        _ret = n.f1.accept(this, argu);
       // System.out.println(_ret);
        return _ret;
    }

    /**
     * f0 -> Reg()
     *       | IntegerLiteral()
     *       | Label()
     */
    public R visit(SimpleExp n, A argu) {
        R _ret=null;
        _ret = n.f0.accept(this, argu);
        if(n.f0.which == 0) System.out.println("move $v0 $" + (String) _ret);
        else if(n.f0.which == 1) System.out.println("li $v0 " +  _ret);
        else if(n.f0.which == 2) System.out.println("la $v0 " + (String) _ret);
        return _ret;
    }

    /**
     * f0 -> "a0"
     *       | "a1"
     *       | "a2"
     *       | "a3"
     *       | "t0"
     *       | "t1"
     *       | "t2"
     *       | "t3"
     *       | "t4"
     *       | "t5"
     *       | "t6"
     *       | "t7"
     *       | "s0"
     *       | "s1"
     *       | "s2"
     *       | "s3"
     *       | "s4"
     *       | "s5"
     *       | "s6"
     *       | "s7"
     *       | "t8"
     *       | "t9"
     *       | "v0"
     *       | "v1"
     */
    public R visit(Reg n, A argu) {
        R _ret=null;
        if(n.f0.which == 0) _ret = (R)"a0";
        else if(n.f0.which == 1) _ret = (R)"a1";
        else if(n.f0.which == 2) _ret = (R)"a2";
        else if(n.f0.which == 3) _ret = (R)"a3";
        else if(n.f0.which == 4) _ret = (R)"t0";
        else if(n.f0.which == 5) _ret = (R)"t1";
        else if(n.f0.which == 6) _ret = (R)"t2";
        else if(n.f0.which == 7) _ret = (R)"t3";
        else if(n.f0.which == 8) _ret = (R)"t4";
        else if(n.f0.which == 9) _ret = (R)"t5";
        else if(n.f0.which == 10) _ret = (R)"t6";
        else if(n.f0.which == 11) _ret = (R)"t7";
        else if(n.f0.which == 12) _ret = (R)"s0";
        else if(n.f0.which == 13) _ret = (R)"s1";
        else if(n.f0.which == 14) _ret = (R)"s2";
        else if(n.f0.which == 15) _ret = (R)"s3";
        else if(n.f0.which == 16) _ret = (R)"s4";
        else if(n.f0.which == 17) _ret = (R)"s5";
        else if(n.f0.which == 18) _ret = (R)"s6";
        else if(n.f0.which == 19) _ret = (R)"s7";
        else if(n.f0.which == 20) _ret = (R)"t8";
        else if(n.f0.which == 21) _ret = (R)"t9";
        else if(n.f0.which == 22) _ret = (R)"v0";
        else  _ret = (R)"v1";
        n.f0.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> <INTEGER_LITERAL>
     */
    public R visit(IntegerLiteral n, A argu) {
        R _ret=null;
        String str = n.f0.tokenImage;
        Integer res = Integer.parseInt(str);
        _ret = (R)res;
        n.f0.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> <IDENTIFIER>
     */
    public R visit(Label n, A argu) {
        R _ret=null;
        n.f0.accept(this, argu);
        String res = (String)n.f0.tokenImage;
        if(sflag) System.out.println(res + ": ");
        _ret = (R)res;
        return _ret;
    }

    /**
     * f0 -> "//"
     * f1 -> SpillStatus()
     */
    public R visit(SpillInfo n, A argu) {
        R _ret=null;
        n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> <SPILLED>
     *       | <NOTSPILLED>
     */
    public R visit(SpillStatus n, A argu) {
        R _ret=null;
        n.f0.accept(this, argu);
        return _ret;
    }

}
